SPRING BOOT NOTES:

Create the Project either using the IDE or start.spring.io

Unzip the project file which we got from start.spring.io and cut and paste the folder inside our Repo folder.

Open the STS IDE
File Menu -> Open projects from file system -> Select the project folder

Now Open Application Properties under src/main/resources
Add the mongodb URL:

spring.data.mongodb.uri=mongodb://localhost:27017/nithin_db

Now under src/main/java folder you can see an existing package named: com.student.student_crud

Inside this package, create sub packages:
	com.student.student_crud.controller
	com.student.student_crud.model
	com.student.student_crud.repository
	com.student.student_crud.service
	
Now, inside the repository package:
	Create a new Interface named: StudentRepository
	
		@Repository
		StudentRepository extends MongoRepository<Student, String> {
		
		}
		
Create a new class under model package named: Student

@Document(value = "students")
@Data
@Builder
public class Student {
	private String id;
	private String name;
	private int semester;
	private String branch;
} 

Create a controller class under controller package named:
	StudentController

Annotate:
@RestController
@RequestMapping("/api/student")

Create a service class under service package named:
	StudentService

Annotate the class StudentService with:
@Service
	
And add the below code in it:

@Autowired
	private StudentRepository studentRepository;

	public String createStudent(StudentDao student) {
			try {
				Student student = Student.builder()
					.name(student.getName())
					.semester(student.getSemester())
					.branch(student.getBranch())
					.build();
				studentRepository.save(student);
			}
			catch(Exception e) {
				
			}
			return "Student document added";
	}

public list<Student> getStudents() {
		List <Student> studentList = new ArrayList<>();
		try {
			studentList = studentRepository.findAll();
		}
		catch(Exception e) {
		
		}
		return studentList;
	}
	
public String deleteStudent(String id) {
	try {
			studentRepository.deleteById(id);
		}
		catch(Exception e) {
		
		}
		return "Student record deleted";
}

public String updateStudent(Student student) {
	try {
			Student stud = Student.builder()
							.id(student.getId())
							.name(student.getName())
							.semester(student.getSemester())
							.branch(student.getBranch())
							.build();
			studentRepository.save(stud);
		}
		catch(Exception e) {
		
		}
		return "Student record updated";
}



