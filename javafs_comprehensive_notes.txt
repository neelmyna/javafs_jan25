On top of the window (slightly on right), you can see a + button
Click the new repo button (plus button) -> New Repository

In the new window, give the Repo name: javafs_jan25

Description: This repo was created for the Java full stack learning using html-css-js as the FE, SpringBoot as BE and MongoDb as the Data Source.

Keep the Repo Public

Select the Checkbox "Add readme File"

Click the green button "create repo"


Use of Github
HTML
CSS
JS
MongoDb
Bootstrap
Java (important concepts of OOP, Exception handling and Collections) and problem solving
JSP-Servlets
SpringBoot
Project Building (CRUD Operations)
	Java-MongoDb driver-MongoDb (BE-DB)
	SpringBoot-MongoDb			(BE-DB)
	HTML-CSS-JS JSP-Servlets MongoDb (FE-BE-DB)
	Bootstrap - SpringBoot - MongoDb (FE-BE-DB)

Further Learning:
ReactJs
MySql
Node-Express

ReactJs - SpringBoot - MongoDb
ReactJs - Node-Express - MongoDb
ReactJs - SpringBoot - MySql
ReactJs - Node-Express - MySql

Angular - SpringBoot - MongoDb
Angular - Node-Express - MongoDb
Angular - SpringBoot - MySql
Angular - Node-Express - MySql

https://github.com/neelmyna/javafs_jan25


Steps to create Personal Access Token (PAT):
1. Click on your profile picture (Top right corner)
2. Scroll down and Click Settings
3. In the new window, scroll down and click developer settings (left bottom corner)
4. Now, in the new window on top right, click -> Personal access tokens -> select Classic
5. In the new window, Click Generate New Token -> select Tokens Classic
6. In the new window, give:
	Description: "This PAT was created for my learning full stack development technologies"
	Expiration: Select No Expiry
	Later fully scroll down (do not select any check boxes) and click the button "create PAT"
	
NOTE: Copy the PAT that is created and mail it to yourself (Keep it confidential) and see that it is always with you (do not lose the PAT)

Arrangement and Organising Software in our Computer:
We must neatly aarange the files, software and Apps in our laptops.
Use C drive only to store the OS and the software
Use D drive only for your learning (projects and programs and material)
Use E drive for your personal (Movies, music, photos etc)

1. Create a folder named "software" in C drive 
	1. create a folder for every software or app you are going to install
	2. store the downloaded installer files (.msi files) in these respective folders
	3. Now double click on the installer file and install it.

Download Git:
Google: Download git
Use the link: https://git-scm.com/downloads
Select the OS and download the installer file
Cut the installer file from the "downloads" folder and paste it inside C:/software/git folder
Now dowuble click and install it
Note that you must get the CLI/Command/App "git"
$ git --version (This is to check the version number of the CLI and also to check if the App is available)

Create a folder named "learning" in the drive D or E (which ever you use for learning purpose)

Inside learning, create the folders for all the technologies that you are learning
	python
	java
	javafs
	mongodb
D:/learning/javafs

GIT COMMANDS:

$ git status
To check the status of my repo (local repo)

$ git add
This command will mark all the files that need to be updated to the remote repo

$ git add .
This command will mark all the files from the current folder/path/directory that need to be updated to the remote repo.

$ git commit -m "p4 and p5 programs are added"


$ git push origin main


$ git clone https://github.com/neelmyna/javafs_jan25


$ git clone https://PAT@github.com/neelmyna/javafs_jan25

MongoDB database Notes:

MONGO DB NOTES:
https://www.mongodb.com/developer/products/mongodb/cheat-sheet/

1. MongoDB is a Document based NOSQL (Not Only SQL). We can do RDBMS kind of DB creation and at the same time, Non-RDBMS DB can also be created.
2. MongoDB uses JS syntax. This helps us in developing the End-to-End Full Stack App easily. Because, we may choose the Front-End and Back-End technologies which are also JS based.
3. To work with MongoDB, we are given with a global object named "db" which we can call as mongoDB instance. Using this instance, we can call the library methods (built in functions).
4. Since it is Djkn  ocument based, we can create the data in an Array, Multi Dimensional Array and also in Hierarchical DS (Tree).
5. General purpose DB, Schema less model or flexible schema design, native aggregation, scalability and load balancing algorithms are inherent to mongo db, security features are available, mapReduce, Atlas.
6. MongoDB is Document Based and Schema Free DB
Other Examples for NoSQL DBs are:
Graph based
Document Based
Key-Value Based
Wide-Column Based

SIMILARITY:
RDBMS				MongoDB
database			database
Tables				collections
row/tuple/object	document/record/object

WORKING OF MONGO-DB
-> It stores the data in J-son Format.
-> The data is stored using Key-Value pairs
-> In the back-end, the Json data is converted into Binary which we call as Bey-Son
-> Data are stored as Documents. These Documents can be nested. And the documents are in turn are stored in collections.
-> The documents thus are independent from documents in other collections.
Since Mongo-DB is schema less, the data can be different and need not be similar.
---------------------------------------------------------------
INSTALLATION OF MongoDB ON WINDOWS:
-> mongodb.com
-> software -> community server -> download msi -> follow the steps and install
-> install mongosh
-> install mongodb compass

* C:\ -> Program files -> mongodb -> server -> <version No.> -> bin
-> Copy this path and add it to environment variables (So that we can use the CLI mongo and mongod from anywhere/any path)
-> mongo and mongod are executable files or the CLI
-> mongod is a demon process that runs in background
-> to check if mongo-db is installed, use the command:
@ mongo --version

To start the mongo-db server:(Old versions Only)
Download the msi file.
Create folder named "data" in C drive and "db" as sub-folder
Go to the progam files -> mongoDB -> In the address bar, type "cmd" and hit enter
Now in the command prompt run the below command
$ mongod --dbpath "C:/data"

The above command runs the server. Keep the server running.
From the mongoDB path, again open the command prompt.
Run the command "mongo" to run the client
$mongo
We get the Prompt !!!
-------------------------------------------------------------
MongoDb TOC:
Mongo Installation
Create DB
Drop DB
Create Collection
Drop Collection
Data Types
Insert Document to Collection
Query Document
Update Document
Delete Document
Indexing
Aggregation
Replication
Sharding
Deployment
------------------------------------------------------------
mongod and mongo are the 2 CLIs we get when we install MongoDB
These 2 CLIs are found inside the mongoDB BIN folder.
mongod is to start the server
mongo is the client that connects to the server.

Note: To use the mongod command, we must have a folder named db inside data inside c drive. This is the default folder for which the mongod looks for (C:\data\db)

mongod --dbpath ~data\db
The command runs the mongoDB server

Now, we can use another window and run the mongo command and we should get the prompt.
---------------------------------------------------------
DIFFERENT WAYS TO CONNECT TO MongoDB:
$ mongosh 
#1. connects to mongodb://127.0.0.1:27017 by default

mongosh --host <host> --port <port> --authenticationDatabase admin -u <user> -p <pwd> 
#2. To connect as an admin with password authentication and Omit the password if you want a prompt

mongosh "mongodb://<user>:<password>@192.168.1.1:27017"
#3. To connect with Username and password

mongosh "mongodb://192.168.1.1:27017"
#4. To connect to a particular URL

engg_students
EnggStudent

employees
Employee 

persons
	_id
	name
	gender

students
	_id
	name
	semester
	branch
	avg_score
	phone_num

employees
	_id
	emp_code
	name
	designation
	salary
	years_of_exp
	
flights
	_id
	airline
	code (airline_code_flight_code) 6E2617  AI567
	source
	destination
	duration
	fare

5. Command that lists all the collections from the DB we are present in.
> show collections;

6. Command that lists all the documents present inside the collection employees (inside nithin_db DB)
> db.employees.find();

The 1st field which is "_id" is auto generated by mongoDB which is 24 Alphanumeric code and its data type is ObjectId

7. Command to list the DB name we are currently present in
> db;

8. To exit the mongoDB Shell (Note: This will not stop the server)
> exit;
> quit;

9. To clear the screen
> cls;

10. To create a new DB named nithin_db
> create db nithin_db;

12. Alternate way to create a document in a collection
> db.mtd_student.insert({id:101, name:'Nithin'})

Here, mtd_student is the collection name and insert() method inserts a document (row) into the collection.
Note: IF the collection doesn't exist, then a new collection is created by this command. Thus the above command creates, not just the document, but also the collection.

13. Delete Database
> db.dropDatabase('demo_db')

14. Drop a collection named 'students'
> db.students.drop()

> db.departments.find({});

> db.departments.insertOne({departmentId:106, departmentName:'FullStack'});

> db.departments.deleteOne({departmentId:106});

CRUD
Create (insert) one document				post
Read/Retrive/select/get one document		get
update one document							put
delete one document							delete
read with id								get

CRUD OPERATION		RESTFUL API		HOW TO USE
insert one row		post			the object/data is 									given as body
list all rows		get				get
update one row		put				put/:id
delete one row		delete			delete/:id
search one row		get				get/:id


persons
	_id
	name
	gender
	
db.persons.insertOne({name:'namita', gender:'f'});
db.persons.find();
db.persons.findOne({name:''nithin'});

db.persons.findOne({name:'nithin'});
null 
The document with name 'nithin' was not found

db.persons.findOne({name:'nithin'});
This returns always either 0 or object/document

git config --global user.name "neelmyna"

git config --global user.email "nitinmyna@gmail.com"
----------------------------------
If further error exists, then try this:

git remote set-url origin https://{new url with username replaced}

Go to Windows Search and type:
	credential Manager
	Very the git username
---------------------------------------------------
CRUD Operations on persons:

Insert One document:
db.persons.insertOne({name:'namita', gender:'f'});

Search One Record:
db.persons.find({name:'Nithin'})
db.persons.find({_id:6777623c310a1f7e89e540d1})

Delete One Record:
db.persons.deleteOne({name:'Nithin'})

Update One Record:
db.persons.updateOne({name:'niharika'},{$set:{gender:'f'}});:'f'});
db.persons.updateOne({name:'namita'},{$set:{name:'namitha'}});

List All:
db.persons.find();

// Print pretty view
db.persons.find().pretty();

// List only 1st 3 documents
db.persons.find().limit(3);

// List only last 3 documents
db.persons.find().sort({_id: -1 }).limit(3);